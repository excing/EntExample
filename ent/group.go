// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ent_example/ent/group"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"old,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// Code holds the value of the "code" field.
	Code int `json:"code,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Min holds the value of the "min" field.
	Min int `json:"min,omitempty"`
	// Max holds the value of the "max" field.
	Max int `json:"max,omitempty"`
	// Range holds the value of the "range" field.
	Range int `json:"range,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Log holds the value of the "log" field.
	Log string `json:"log,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges       GroupEdges `json:"edges"`
	user_groups *int
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // nickname
		&sql.NullInt64{},  // count
		&sql.NullInt64{},  // code
		&sql.NullInt64{},  // index
		&sql.NullInt64{},  // min
		&sql.NullInt64{},  // max
		&sql.NullInt64{},  // range
		&sql.NullString{}, // note
		&sql.NullString{}, // log
		&sql.NullString{}, // username
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Group) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_groups
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(values ...interface{}) error {
	if m, n := len(values), len(group.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	gr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		gr.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nickname", values[1])
	} else if value.Valid {
		gr.Nickname = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field count", values[2])
	} else if value.Valid {
		gr.Count = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[3])
	} else if value.Valid {
		gr.Code = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[4])
	} else if value.Valid {
		gr.Index = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field min", values[5])
	} else if value.Valid {
		gr.Min = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field max", values[6])
	} else if value.Valid {
		gr.Max = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field range", values[7])
	} else if value.Valid {
		gr.Range = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[8])
	} else if value.Valid {
		gr.Note = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field log", values[9])
	} else if value.Valid {
		gr.Log = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[10])
	} else if value.Valid {
		gr.Username = value.String
	}
	values = values[11:]
	if len(values) == len(group.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_groups", value)
		} else if value.Valid {
			gr.user_groups = new(int)
			*gr.user_groups = int(value.Int64)
		}
	}
	return nil
}

// QueryUsers queries the users edge of the Group.
func (gr *Group) QueryUsers() *UserQuery {
	return (&GroupClient{config: gr.config}).QueryUsers(gr)
}

// Update returns a builder for updating this Group.
// Note that, you need to call Group.Unwrap() before calling this method, if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return (&GroupClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", nickname=")
	builder.WriteString(gr.Nickname)
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", gr.Count))
	builder.WriteString(", code=")
	builder.WriteString(fmt.Sprintf("%v", gr.Code))
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", gr.Index))
	builder.WriteString(", min=")
	builder.WriteString(fmt.Sprintf("%v", gr.Min))
	builder.WriteString(", max=")
	builder.WriteString(fmt.Sprintf("%v", gr.Max))
	builder.WriteString(", range=")
	builder.WriteString(fmt.Sprintf("%v", gr.Range))
	builder.WriteString(", note=")
	builder.WriteString(gr.Note)
	builder.WriteString(", log=")
	builder.WriteString(gr.Log)
	builder.WriteString(", username=")
	builder.WriteString(gr.Username)
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group

func (gr Groups) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
