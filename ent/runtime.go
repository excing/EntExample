// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ent_example/ent/blob"
	"ent_example/ent/card"
	"ent_example/ent/group"
	"ent_example/ent/schema"
	"ent_example/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	blobFields := schema.Blob{}.Fields()
	_ = blobFields
	// blobDescID is the schema descriptor for id field.
	blobDescID := blobFields[0].Descriptor()
	// blob.DefaultID holds the default value on creation for the id field.
	blob.DefaultID = blobDescID.Default.(func() uuid.UUID)
	cardFields := schema.Card{}.Fields()
	_ = cardFields
	// cardDescNumber is the schema descriptor for number field.
	cardDescNumber := cardFields[1].Descriptor()
	// card.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	card.NumberValidator = cardDescNumber.Validators[0].(func(string) error)
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[1].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = func() func(string) error {
		validators := groupDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescNickname is the schema descriptor for nickname field.
	groupDescNickname := groupFields[2].Descriptor()
	// group.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	group.NicknameValidator = groupDescNickname.Validators[0].(func(string) error)
	// groupDescCount is the schema descriptor for count field.
	groupDescCount := groupFields[3].Descriptor()
	// group.CountValidator is a validator for the "count" field. It is called by the builders before save.
	group.CountValidator = groupDescCount.Validators[0].(func(int) error)
	// groupDescCode is the schema descriptor for code field.
	groupDescCode := groupFields[4].Descriptor()
	// group.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	group.CodeValidator = groupDescCode.Validators[0].(func(int) error)
	// groupDescIndex is the schema descriptor for index field.
	groupDescIndex := groupFields[5].Descriptor()
	// group.IndexValidator is a validator for the "index" field. It is called by the builders before save.
	group.IndexValidator = groupDescIndex.Validators[0].(func(int) error)
	// groupDescMin is the schema descriptor for min field.
	groupDescMin := groupFields[6].Descriptor()
	// group.MinValidator is a validator for the "min" field. It is called by the builders before save.
	group.MinValidator = groupDescMin.Validators[0].(func(int) error)
	// groupDescMax is the schema descriptor for max field.
	groupDescMax := groupFields[7].Descriptor()
	// group.MaxValidator is a validator for the "max" field. It is called by the builders before save.
	group.MaxValidator = groupDescMax.Validators[0].(func(int) error)
	// groupDescRange is the schema descriptor for range field.
	groupDescRange := groupFields[8].Descriptor()
	// group.RangeValidator is a validator for the "range" field. It is called by the builders before save.
	group.RangeValidator = groupDescRange.Validators[0].(func(int) error)
	// groupDescNote is the schema descriptor for note field.
	groupDescNote := groupFields[9].Descriptor()
	// group.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	group.NoteValidator = groupDescNote.Validators[0].(func(string) error)
	// groupDescLog is the schema descriptor for log field.
	groupDescLog := groupFields[10].Descriptor()
	// group.LogValidator is a validator for the "log" field. It is called by the builders before save.
	group.LogValidator = groupDescLog.Validators[0].(func(string) error)
	// groupDescUsername is the schema descriptor for username field.
	groupDescUsername := groupFields[11].Descriptor()
	// group.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	group.UsernameValidator = groupDescUsername.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[0].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[2].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[9].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() uuid.UUID)
}
